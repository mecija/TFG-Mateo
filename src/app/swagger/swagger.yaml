---
openapi: 3.0.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: https://jasperflow.fly.dev
    description: Generated server url
paths:
  "/api/users/{id}":
    get:
      tags:
        - user-controller
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserView"
    put:
      tags:
        - user-controller
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserView"
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  "/api/products/{id}":
    get:
      tags:
        - product-controller
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEdit"
    put:
      tags:
        - product-controller
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEdit"
    delete:
      tags:
        - product-controller
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  "/api/orders/{id}":
    get:
      tags:
        - order-controller
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderEdit"
    put:
      tags:
        - order-controller
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderEdit"
    delete:
      tags:
        - order-controller
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  "/api/fichajes/{id}":
    get:
      tags:
        - fichaje-controller
      operationId: getFichajeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FichajeEdit"
    put:
      tags:
        - fichaje-controller
      operationId: updateFichaje
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FichajeEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FichajeEdit"
    delete:
      tags:
        - fichaje-controller
      operationId: deleteFichaje
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  "/api/clients/{id}":
    get:
      tags:
        - client-controller
      operationId: getClientById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientEdit"
    put:
      tags:
        - client-controller
      operationId: updateClient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientEdit"
    delete:
      tags:
        - client-controller
      operationId: deleteClient
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  "/api/bills/{id}":
    get:
      tags:
        - bill-controller
      operationId: getBillById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillEdit"
    put:
      tags:
        - bill-controller
      operationId: updateBill
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillEdit"
    delete:
      tags:
        - bill-controller
      operationId: deleteBill
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
  /auth/verify:
    post:
      tags:
        - auth-controller
      operationId: verifyToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: {}
  /auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: {}
  /api/users/filter:
    post:
      tags:
        - user-controller
      operationId: getUsersWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUserView"
  /api/users/create:
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserView"
  /api/products:
    get:
      tags:
        - product-controller
      operationId: getAllProducts
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageProductEdit"
    post:
      tags:
        - product-controller
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductEdit"
  /api/products/filter:
    post:
      tags:
        - product-controller
      operationId: getProductsWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageProductEdit"
  /api/orders:
    get:
      tags:
        - order-controller
      operationId: getAllOrders
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOrderEdit"
    post:
      tags:
        - order-controller
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderEdit"
  /api/orders/filter:
    post:
      tags:
        - order-controller
      operationId: getOrdersWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageOrderEdit"
  /api/fichajes:
    get:
      tags:
        - fichaje-controller
      operationId: getAllFichajes
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFichajeEdit"
    post:
      tags:
        - fichaje-controller
      operationId: createFichaje
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FichajeEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FichajeEdit"
  /api/fichajes/filter:
    post:
      tags:
        - fichaje-controller
      operationId: getFichajesWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FichajeFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFichajeEdit"
  /api/clients:
    get:
      tags:
        - client-controller
      operationId: getAllClients
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageClientEdit"
    post:
      tags:
        - client-controller
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientEdit"
  /api/clients/filter:
    post:
      tags:
        - client-controller
      operationId: getClientsWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClientFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageClientEdit"
  /api/bills:
    get:
      tags:
        - bill-controller
      operationId: getAllOrders_1
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBillEdit"
    post:
      tags:
        - bill-controller
      operationId: createBill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillEdit"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillEdit"
  /api/bills/filter:
    post:
      tags:
        - bill-controller
      operationId: getBillsWithFilters
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BillFilter"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBillEdit"
  /api/users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUserView"
components:
  schemas:
    RolDB:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        users:
          type: array
          items:
            $ref: "#/components/schemas/UserDB"
          uniqueItems: true
    UserDB:
      type: object
      properties:
        id:
          type: integer
          format: int32
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RolDB"
          uniqueItems: true
        name:
          type: string
        email:
          type: string
        password:
          type: string
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time
        verificationToken:
          type: string
    UserEdit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RolDB"
        name:
          type: string
        email:
          type: string
        enabled:
          type: boolean
    RoleDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
    UserView:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        enabled:
          type: boolean
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
          uniqueItems: true
    ProductEdit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        category:
          type: string
        stock:
          type: integer
          format: int32
        price:
          type: number
          format: double
    OrderEdit:
      type: object
      properties:
        creationTime:
          type: string
          format: date-time
        deliveryTime:
          type: string
          format: date-time
        orderId:
          type: integer
          format: int32
        clientId:
          type: integer
          format: int32
        orderStatus:
          type: string
        amount:
          type: integer
          format: int32
        deliveryAddress:
          type: string
        productos:
          type: array
          items:
            $ref: "#/components/schemas/OrderProductDTO"
    OrderProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        amount:
          type: integer
          format: int32
    FichajeEdit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        employeeId:
          type: integer
          format: int32
        initialTime:
          type: string
          format: date-time
        exitTime:
          type: string
          format: date-time
        initialLocation:
          type: string
        exitLocation:
          type: string
    ClientEdit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        dni:
          type: string
        nombre:
          type: string
        empresa:
          type: string
        pais:
          type: string
        direccion:
          type: string
        email:
          type: string
        telefono:
          type: string
    BillEdit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        destinatarioDenomSocial:
          type: string
        destinatarioNif:
          type: string
        destinatarioDIR:
          type: string
        destinatarioDireccionFiscal:
          type: string
        emisorDenomSocial:
          type: string
        emisorNif:
          type: string
        emisorDireccionFiscal:
          type: string
        serie:
          type: string
        numeroCorrelativo:
          type: string
        fechaEmision:
          type: string
        fechaVencimiento:
          type: string
        concepto:
          type: string
        albaranes:
          type: string
        tipoIVA:
          type: string
        tipoRetencion:
          type: string
        baseFactura:
          type: string
        importeFinal:
          type: string
        formaPago:
          type: string
        fechaPago:
          type: string
    TokenRequest:
      type: object
      properties:
        token:
          type: string
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        enabled:
          type: boolean
        createdAtStart:
          type: string
          format: date-time
        createdAtEnd:
          type: string
          format: date-time
        lastLoginStart:
          type: string
          format: date-time
        lastLoginEnd:
          type: string
          format: date-time
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageUserView:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserView"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
    Pageablenull:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/Sortnull"
        paged:
          type: boolean
        unpaged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
    Sortnull:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    UserRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        roleIds:
          type: array
          items:
            type: integer
            format: int32
          uniqueItems: true
    ProductFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        category:
          type: string
        minPrice:
          type: number
          format: double
        maxPrice:
          type: number
          format: double
        minStock:
          type: integer
          format: int32
        maxStock:
          type: integer
          format: int32
    PageProductEdit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProductEdit"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
    OrderFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        creationTimeStart:
          type: string
          format: date-time
        creationTimeEnd:
          type: string
          format: date-time
        deliveryTimeStart:
          type: string
          format: date-time
        deliveryTimeEnd:
          type: string
          format: date-time
        clientId:
          type: integer
          format: int32
        orderStatus:
          type: string
        minAmount:
          type: integer
          format: int32
        maxAmount:
          type: integer
          format: int32
        deliveryAddress:
          type: string
    PageOrderEdit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/OrderEdit"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
    FichajeFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        employeeId:
          type: integer
          format: int32
        initialTimeStart:
          type: string
          format: date-time
        initialTimeEnd:
          type: string
          format: date-time
        exitTimeStart:
          type: string
          format: date-time
        exitTimeEnd:
          type: string
          format: date-time
        initialLocation:
          type: string
        exitLocation:
          type: string
    PageFichajeEdit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/FichajeEdit"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
    ClientFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        dni:
          type: string
        nombre:
          type: string
        empresa:
          type: string
        pais:
          type: string
        direccion:
          type: string
    PageClientEdit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ClientEdit"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
    BillFilter:
      type: object
      properties:
        id:
          type: integer
          format: int32
        destinatarioDenomSocial:
          type: string
        destinatarioNif:
          type: string
        destinatarioDireccionFiscal:
          type: string
        emisorDenomSocial:
          type: string
        emisorNif:
          type: string
        numeroCorrelativo:
          type: string
    PageBillEdit:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/BillEdit"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/Sortnull"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        pageable:
          $ref: "#/components/schemas/Pageablenull"
        empty:
          type: boolean
